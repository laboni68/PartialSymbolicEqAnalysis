; benchmark generated from python API
(set-info :status unknown)
(declare-fun R () (_ BitVec 32))
(declare-fun rcx () (_ BitVec 64))
(declare-fun rdi () (_ BitVec 64))
(declare-fun rsi () (_ BitVec 64))
(declare-fun rdx () (_ BitVec 64))
(assert
 (let (($x2161 (= (_ bv4294967274 32) R)))
 (let ((?x12 ((_ extract 31 0) rcx)))
 (let ((?x13 ((_ zero_extend 32) ?x12)))
 (let (($x46 (bvugt (_ bv50 64) ?x13)))
 (let (($x2211 (and $x46 $x2161)))
 (let (($x17 (bvule (_ bv50 64) ?x13)))
 (let ((?x6 ((_ extract 31 0) rdi)))
 (let ((?x34 (bvnot ?x6)))
 (let ((?x8 ((_ extract 31 0) rsi)))
 (let (($x236 (bvuge ?x8 ?x34)))
 (let (($x1772 (and $x236 $x17 $x2161)))
 (let (($x656 (bvult ?x8 ?x34)))
 (let ((?x10 ((_ extract 31 0) rdx)))
 (let ((?x65 (bvand ?x10 (_ bv4294967232 32))))
 (let (($x101 (and (distinct (_ bv0 32) ?x65) true)))
 (let (($x1745 (and $x101 $x656 $x17 $x2161)))
 (let (($x79 (= (_ bv0 32) ?x65)))
 (let (($x802 (bvuge ?x6 (_ bv50 32))))
 (let (($x1067 (and $x802 $x79 $x656 $x17 $x2161)))
 (let (($x792 (bvult ?x6 (_ bv50 32))))
 (let ((?x816 (bvadd ?x6 ?x8)))
 (let (($x845 (bvugt ?x816 (_ bv50 32))))
 (let (($x1066 (and $x845 $x792 $x79 $x656 $x17 $x2161)))
 (let (($x823 (bvule ?x816 (_ bv50 32))))
 (let ((?x124 ((_ extract 7 0) rdx)))
 (let ((?x1977 (bvand ?x124 (_ bv7 8))))
 (let (($x981 (and (distinct (_ bv4 8) ?x1977) true)))
 (let ((?x1640 ((_ extract 2 0) rdx)))
 (let ((?x180 (concat (_ bv0 29) ?x1640)))
 (let (($x117 (bvugt ?x180 (_ bv4 32))))
 (let (($x1946 (and $x117 $x981 $x823 $x792 $x79 $x656 $x17 $x2161)))
 (let (($x136 (= (_ bv4 8) ?x1977)))
 (let ((?x268 ((_ zero_extend 32) ?x8)))
 (let ((?x650 (bvmul (_ bv4 64) ?x268)))
 (let ((?x304 (bvsub ?x13 (_ bv50 64))))
 (let (($x652 (bvult ?x304 ?x650)))
 (let (($x1064 (and $x652 $x136 $x823 $x792 $x79 $x656 $x17 $x2161)))
 (let (($x2499 (= (_ bv0 32) R)))
 (let (($x786 (bvuge ?x304 ?x650)))
 (let (($x2376 (and $x786 $x136 $x823 $x792 $x79 $x656 $x17 $x2499)))
 (let (($x2182 (bvule ?x180 (_ bv4 32))))
 (let (($x821 (= (_ bv1 3) ?x1640)))
 (let (($x2713 (and $x821 $x2182 $x981 $x823 $x792 $x79 $x656 $x17 $x2499)))
 (let (($x800 (and (distinct (_ bv1 3) ?x1640) true)))
 (let (($x1989 (and (distinct (_ bv2 3) ?x1640) true)))
 (let (($x2339 (and $x1989 $x800 $x2182 $x981 $x823 $x792 $x79 $x656 $x17 $x2161)))
 (let (($x629 (= (_ bv2 3) ?x1640)))
 (let ((?x283 (bvmul (_ bv1 64) ?x268)))
 (let (($x286 (bvult ?x304 ?x283)))
 (let (($x2357 (and $x286 $x629 $x800 $x2182 $x981 $x823 $x792 $x79 $x656 $x17 $x2161)))
 (let (($x644 (bvuge ?x304 ?x283)))
 (let (($x2060 (and $x644 $x629 $x800 $x2182 $x981 $x823 $x792 $x79 $x656 $x17 $x2499)))
 (let (($x1325 (or $x2060 $x2357 $x2339 $x2713 $x2376 $x1064 $x1946 $x1066 $x1067 $x1745 $x1772 $x2211)))
 (let (($x1912 (and $x101 $x17 $x2161)))
 (let ((?x128 (bvand ?x124 (_ bv1 8))))
 (let (($x192 (and (distinct (_ bv0 8) ?x128) true)))
 (let (($x1054 (and $x192 $x79 $x17 $x2499)))
 (let (($x114 (= (_ bv0 8) ?x128)))
 (let ((?x225 (bvand ?x124 (_ bv2 8))))
 (let (($x226 (= (_ bv0 8) ?x225)))
 (let ((?x234 (bvand ?x124 (_ bv4 8))))
 (let (($x254 (= (_ bv0 8) ?x234)))
 (let (($x1664 (and $x254 $x226 $x114 $x79 $x17 $x2161)))
 (let (($x258 (and (distinct (_ bv0 8) ?x225) true)))
 (let (($x2051 (and $x286 $x258 $x114 $x79 $x17 $x2161)))
 (let (($x303 (and (distinct (_ bv0 8) ?x234) true)))
 (let (($x1542 (and $x652 $x303 $x226 $x114 $x79 $x17 $x2161)))
 (let (($x1540 (and $x802 $x644 $x258 $x114 $x79 $x17 $x2161)))
 (let (($x2493 (and $x802 $x786 $x303 $x226 $x114 $x79 $x17 $x2161)))
 (let (($x1898 (and $x823 $x792 $x644 $x258 $x114 $x79 $x17 $x2499)))
 (let (($x1653 (and $x845 $x792 $x644 $x258 $x114 $x79 $x17 $x2161)))
 (let (($x2500 (and $x823 $x792 $x786 $x303 $x226 $x114 $x79 $x17 $x2499)))
 (let (($x2270 (and $x845 $x792 $x786 $x303 $x226 $x114 $x79 $x17 $x2161)))
 (let (($x1144 (or $x2270 $x2500 $x1653 $x1898 $x2493 $x1540 $x1542 $x2051 $x1664 $x1054 $x1912 $x2211)))
 (and $x1144 $x1325))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
